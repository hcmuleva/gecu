import {
  axios_default
} from "./chunk-A3Y574CH.js";
import {
  A,
  require_lib
} from "./chunk-2UZQN5J6.js";
import "./chunk-6W5FFVKH.js";
import "./chunk-NKBGLYTV.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@refinedev/strapi-v4/dist/index.mjs
var import_qs = __toESM(require_lib(), 1);
var import_qs2 = __toESM(require_lib(), 1);
var import_qs3 = __toESM(require_lib(), 1);
var M = (r) => {
  switch (r) {
    case "startswith":
      return "startsWith";
    case "endswith":
      return "endsWith";
    case "nin":
      return "notIn";
    case "ncontains":
      return "notContainsi";
    case "ncontainss":
      return "notContains";
    case "containss":
      return "contains";
    case "contains":
      return "containsi";
    case "nnull":
      return "notNull";
  }
  return r;
};
var A2 = (r) => {
  let o = r.split(".");
  if (o.length > 1) {
    let e = "";
    return o.forEach((s) => {
      e += `[${s}]`;
    }), e;
  }
  return `[${o[0]}]`;
};
var S = (r, o = "") => {
  let { field: e, operator: s, value: t } = r, n = "", a = M(s);
  return Array.isArray(t) ? t.map((i, c) => {
    n += `&filters${o}${A2(e)}[$${a}][${c}]=${i}`;
  }) : n += `&filters${o}${A2(e)}[$${a}]=${t}`, n;
};
var v = (r, o = "") => {
  let e = "";
  return r.value.map((s, t) => {
    s.operator !== "or" && s.operator !== "and" && "field" in s ? e += S(s, `${o}[$${r.operator}][${t}]`) : e += v(s, `${o}[$${r.operator}][${t}]`);
  }), e;
};
var $ = (r) => {
  let o = "";
  r && r.map((t) => {
    t.operator !== "or" && t.operator !== "and" && "field" in t ? o += S(t) : o += v(t);
  });
  let e = import_qs2.default.parse(o, { depth: 15 });
  return import_qs2.default.stringify(e, { encodeValuesOnly: true });
};
var h = (r) => {
  let o = [];
  return r && r.map((e) => {
    e.order && o.push(`${e.field}:${e.order}`);
  }), o;
};
var w = axios_default.create();
w.interceptors.response.use((r) => r, (r) => {
  var e, s, t;
  let o = { ...r, message: (s = (e = r.response) == null ? void 0 : e.data) == null ? void 0 : s.message, statusCode: (t = r.response) == null ? void 0 : t.status };
  return Promise.reject(o);
});
var I = (r) => r.attributes ? { id: r.id, ...r.attributes } : r;
var q = (r) => Object.prototype.toString.call(r) === "[object Object]";
var d = (r) => {
  if (Array.isArray(r)) return r.map((o) => d(o));
  if (q(r)) {
    Array.isArray(r.data) ? r = [...r.data] : q(r.data) ? r = I({ ...r.data }) : r.data === null ? r = null : r = I(r);
    for (let o in r) r[o] = d(r[o]);
    return r;
  }
  return r;
};
var H = (r) => {
  let o = {};
  for (let e of r) {
    let s = e.path[0];
    o[s] ? o[s].push(e.message) : o[s] = [e.message];
  }
  return o;
};
var y = (r) => {
  var a, i, c;
  let o = ((i = (a = r == null ? void 0 : r.response) == null ? void 0 : a.data) == null ? void 0 : i.error) || {}, e = o == null ? void 0 : o.message, s = o == null ? void 0 : o.status, t = ((c = o == null ? void 0 : o.details) == null ? void 0 : c.errors) || [];
  return { statusCode: s, message: e, errors: H(t) };
};
var ir = (r, o = w) => ({ getList: async ({ resource: e, pagination: s, filters: t, sorters: n, meta: a }) => {
  var b, m, F;
  let i = `${r}/${e}`, { current: c = 1, pageSize: p = 10, mode: u = "server" } = s ?? {}, l = a == null ? void 0 : a.locale, f = a == null ? void 0 : a.fields, P = a == null ? void 0 : a.populate, Q = a == null ? void 0 : a.publicationState, E = h(n), j = $(t), k = { ...u === "server" ? { "pagination[page]": c, "pagination[pageSize]": p } : {}, locale: l, publicationState: Q, fields: f, populate: P, sort: E.length > 0 ? E.join(",") : void 0 }, { data: x } = await o.get(`${i}?${import_qs.default.stringify(k, { encodeValuesOnly: true })}&${j}`);
  return { data: d(x), total: ((m = (b = x.meta) == null ? void 0 : b.pagination) == null ? void 0 : m.total) || ((F = d(x)) == null ? void 0 : F.length) };
}, getMany: async ({ resource: e, ids: s, meta: t }) => {
  let n = `${r}/${e}`, a = t == null ? void 0 : t.locale, i = t == null ? void 0 : t.fields, c = t == null ? void 0 : t.populate, p = t == null ? void 0 : t.publicationState, u = $([{ field: "id", operator: "in", value: s }]), l = { locale: a, fields: i, populate: c, publicationState: p, "pagination[pageSize]": s.length }, { data: f } = await o.get(`${n}?${import_qs.default.stringify(l, { encodeValuesOnly: true })}&${u}`);
  return { data: d(f) };
}, create: async ({ resource: e, variables: s }) => {
  let t = `${r}/${e}`, n = { data: s };
  e === "users" && (n = s);
  try {
    let { data: a } = await o.post(t, n);
    return { data: a };
  } catch (a) {
    throw y(a);
  }
}, update: async ({ resource: e, id: s, variables: t }) => {
  let n = `${r}/${e}/${s}`, a = { data: t };
  e === "users" && (a = t);
  try {
    let { data: i } = await o.put(n, a);
    return { data: i };
  } catch (i) {
    throw y(i);
  }
}, updateMany: async ({ resource: e, ids: s, variables: t }) => {
  let n = [], a = await Promise.all(s.map(async (i) => {
    let c = `${r}/${e}/${i}`, p = { data: t };
    e === "users" && (p = t);
    try {
      let { data: u } = await o.put(c, p);
      return u;
    } catch (u) {
      let l = y(u);
      n.push(l);
    }
  }));
  if (n.length > 0) throw n;
  return { data: a };
}, createMany: async ({ resource: e, variables: s }) => {
  let t = [], n = await Promise.all(s.map(async (a) => {
    try {
      let { data: i } = await o.post(`${r}/${e}`, { data: a });
      return i;
    } catch (i) {
      let c = y(i);
      t.push(c);
    }
  }));
  if (t.length > 0) throw t;
  return { data: n };
}, getOne: async ({ resource: e, id: s, meta: t }) => {
  let n = t == null ? void 0 : t.locale, a = t == null ? void 0 : t.fields, i = t == null ? void 0 : t.populate, c = t == null ? void 0 : t.publicationState, p = { locale: n, fields: a, populate: i, publicationState: c }, u = `${r}/${e}/${s}?${import_qs.default.stringify(p, { encode: false })}`, { data: l } = await o.get(u);
  return { data: d(l) };
}, deleteOne: async ({ resource: e, id: s }) => {
  let t = `${r}/${e}/${s}`, { data: n } = await o.delete(t);
  return { data: n };
}, deleteMany: async ({ resource: e, ids: s }) => ({ data: await Promise.all(s.map(async (n) => {
  let { data: a } = await o.delete(`${r}/${e}/${n}`);
  return a;
})) }), getApiUrl: () => r, custom: async ({ url: e, method: s, filters: t, sorters: n, payload: a, query: i, headers: c }) => {
  let p = `${e}?`;
  if (n) {
    let f = h(n);
    f.length > 0 && (p = `${p}&${import_qs.default.stringify({ sort: f.join(",") })}`);
  }
  if (t) {
    let f = $(t);
    p = `${p}&${f}`;
  }
  i && (p = `${p}&${import_qs.default.stringify(i)}`);
  let u;
  switch (s) {
    case "put":
    case "post":
    case "patch":
      u = await o[s](e, a, { headers: c });
      break;
    case "delete":
      u = await o.delete(e, { data: a, headers: c });
      break;
    default:
      u = await o.get(p, { headers: c });
      break;
  }
  let { data: l } = u;
  return Promise.resolve({ data: l });
} });
var fr = (r) => ({ login: async (o, e) => {
  let s = `${r}/auth/local`;
  return await axios_default.post(s, { identifier: o, password: e });
}, me: async (o, e) => {
  let { metaData: s, meta: t } = e ?? {}, n = A(t, s), a = n == null ? void 0 : n.locale, i = n == null ? void 0 : n.fields, c = n == null ? void 0 : n.populate, p = { locale: a, fields: i, populate: c };
  return await axios_default.get(`${r}/users/me?${import_qs3.default.stringify(p, { encodeValuesOnly: true })}`, { headers: { Authorization: `Bearer ${o}` } });
} });
var yr = (r, o) => r ? { file: r.file, fileList: r.fileList ?? (Array.isArray(r) ? r : [r]).map((e) => {
  let s = { name: e.name, percent: e.percent, size: e.size, status: e.status, type: e.mime || e.type, uid: e.id };
  return e.url && (s.url = `${o}${e.url}`), s;
}) } : { fileList: [] };
var gr = (r) => (Object.keys(r).map((o) => {
  if (r[o]) {
    let e = r[o].fileList;
    if (Array.isArray(e)) {
      let t = [];
      for (let n of e) if (n.response) for (let a of n.response) t.push(a.id);
      else t.push(n.uid);
      r[o] = t;
    }
  }
}), r);
export {
  fr as AuthHelper,
  ir as DataProvider,
  w as axiosInstance,
  $ as generateFilter,
  A2 as generateNestedFilterField,
  h as generateSort,
  yr as getValueProps,
  M as mapOperator,
  gr as mediaUploadMapper,
  d as normalizeData,
  H as transformErrorMessages,
  y as transformHttpError
};
//# sourceMappingURL=@refinedev_strapi-v4.js.map
