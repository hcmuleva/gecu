{
  "version": 3,
  "sources": ["../../@refinedev/strapi-v4/src/dataProvider.ts", "../../@refinedev/strapi-v4/src/utils/mapOperator.ts", "../../@refinedev/strapi-v4/src/utils/generateFilter.ts", "../../@refinedev/strapi-v4/src/utils/generateSort.ts", "../../@refinedev/strapi-v4/src/utils/axios.ts", "../../@refinedev/strapi-v4/src/utils/normalizeData.ts", "../../@refinedev/strapi-v4/src/utils/transformErrorMessages.ts", "../../@refinedev/strapi-v4/src/utils/transformHttpError.ts", "../../@refinedev/strapi-v4/src/helpers/auth.ts", "../../@refinedev/strapi-v4/src/helpers/normalize.ts"],
  "sourcesContent": ["import type { DataProvider as IDataProvider, HttpError } from \"@refinedev/core\";\nimport type { AxiosInstance } from \"axios\";\nimport qs from \"qs\";\nimport {\n  axiosInstance,\n  generateFilter,\n  generateSort,\n  normalizeData,\n  transformHttpError,\n} from \"./utils\";\n\nexport const DataProvider = (\n  apiUrl: string,\n  httpClient: AxiosInstance = axiosInstance,\n): Required<IDataProvider> => ({\n  getList: async ({ resource, pagination, filters, sorters, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const { current = 1, pageSize = 10, mode = \"server\" } = pagination ?? {};\n\n    const locale = meta?.locale;\n    const fields = meta?.fields;\n    const populate = meta?.populate;\n    const publicationState = meta?.publicationState;\n\n    const querySorters = generateSort(sorters);\n    const queryFilters = generateFilter(filters);\n\n    const query = {\n      ...(mode === \"server\"\n        ? {\n            \"pagination[page]\": current,\n            \"pagination[pageSize]\": pageSize,\n          }\n        : {}),\n      locale,\n      publicationState,\n      fields,\n      populate,\n      sort: querySorters.length > 0 ? querySorters.join(\",\") : undefined,\n    };\n\n    const { data } = await httpClient.get(\n      `${url}?${qs.stringify(query, {\n        encodeValuesOnly: true,\n      })}&${queryFilters}`,\n    );\n\n    return {\n      data: normalizeData(data),\n      // added to support pagination on client side when using endpoints that provide only data (see https://github.com/refinedev/refine/issues/2028)\n      total: data.meta?.pagination?.total || normalizeData(data)?.length,\n    };\n  },\n\n  getMany: async ({ resource, ids, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const locale = meta?.locale;\n    const fields = meta?.fields;\n    const populate = meta?.populate;\n    const publicationState = meta?.publicationState;\n\n    const queryFilters = generateFilter([\n      {\n        field: \"id\",\n        operator: \"in\",\n        value: ids,\n      },\n    ]);\n\n    const query = {\n      locale,\n      fields,\n      populate,\n      publicationState,\n      \"pagination[pageSize]\": ids.length,\n    };\n\n    const { data } = await httpClient.get(\n      `${url}?${qs.stringify(query, {\n        encodeValuesOnly: true,\n      })}&${queryFilters}`,\n    );\n\n    return {\n      data: normalizeData(data),\n    };\n  },\n\n  create: async ({ resource, variables }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    let dataVariables: any = { data: variables };\n\n    if (resource === \"users\") {\n      dataVariables = variables;\n    }\n\n    try {\n      const { data } = await httpClient.post(url, dataVariables);\n      return {\n        data,\n      };\n    } catch (error) {\n      const httpError = transformHttpError(error);\n\n      throw httpError;\n    }\n  },\n\n  update: async ({ resource, id, variables }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    let dataVariables: any = { data: variables };\n\n    if (resource === \"users\") {\n      dataVariables = variables;\n    }\n\n    try {\n      const { data } = await httpClient.put(url, dataVariables);\n      return {\n        data,\n      };\n    } catch (error) {\n      const httpError = transformHttpError(error);\n\n      throw httpError;\n    }\n  },\n\n  updateMany: async ({ resource, ids, variables }) => {\n    const errors: HttpError[] = [];\n\n    const response = await Promise.all(\n      ids.map(async (id) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        let dataVariables: any = { data: variables };\n\n        if (resource === \"users\") {\n          dataVariables = variables;\n        }\n\n        try {\n          const { data } = await httpClient.put(url, dataVariables);\n          return data;\n        } catch (error) {\n          const httpError = transformHttpError(error);\n\n          errors.push(httpError);\n        }\n      }),\n    );\n\n    if (errors.length > 0) {\n      throw errors;\n    }\n\n    return { data: response };\n  },\n\n  createMany: async ({ resource, variables }) => {\n    const errors: HttpError[] = [];\n\n    const response = await Promise.all(\n      variables.map(async (param) => {\n        try {\n          const { data } = await httpClient.post(`${apiUrl}/${resource}`, {\n            data: param,\n          });\n          return data;\n        } catch (error) {\n          const httpError = transformHttpError(error);\n\n          errors.push(httpError);\n        }\n      }),\n    );\n\n    if (errors.length > 0) {\n      throw errors;\n    }\n\n    return { data: response };\n  },\n\n  getOne: async ({ resource, id, meta }) => {\n    const locale = meta?.locale;\n    const fields = meta?.fields;\n    const populate = meta?.populate;\n    const publicationState = meta?.publicationState;\n\n    const query = {\n      locale,\n      fields,\n      populate,\n      publicationState,\n    };\n\n    const url = `${apiUrl}/${resource}/${id}?${qs.stringify(query, {\n      encode: false,\n    })}`;\n\n    const { data } = await httpClient.get(url);\n\n    return {\n      data: normalizeData(data),\n    };\n  },\n\n  deleteOne: async ({ resource, id }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { data } = await httpClient.delete(url);\n\n    return {\n      data,\n    };\n  },\n\n  deleteMany: async ({ resource, ids }) => {\n    const response = await Promise.all(\n      ids.map(async (id) => {\n        const { data } = await httpClient.delete(`${apiUrl}/${resource}/${id}`);\n        return data;\n      }),\n    );\n    return { data: response };\n  },\n\n  getApiUrl: () => {\n    return apiUrl;\n  },\n\n  custom: async ({\n    url,\n    method,\n    filters,\n    sorters,\n    payload,\n    query,\n    headers,\n  }) => {\n    let requestUrl = `${url}?`;\n\n    if (sorters) {\n      const sortQuery = generateSort(sorters);\n      if (sortQuery.length > 0) {\n        requestUrl = `${requestUrl}&${qs.stringify({\n          sort: sortQuery.join(\",\"),\n        })}`;\n      }\n    }\n\n    if (filters) {\n      const filterQuery = generateFilter(filters);\n      requestUrl = `${requestUrl}&${filterQuery}`;\n    }\n\n    if (query) {\n      requestUrl = `${requestUrl}&${qs.stringify(query)}`;\n    }\n\n    let axiosResponse;\n    switch (method) {\n      case \"put\":\n      case \"post\":\n      case \"patch\":\n        axiosResponse = await httpClient[method](url, payload, {\n          headers,\n        });\n        break;\n      case \"delete\":\n        axiosResponse = await httpClient.delete(url, {\n          data: payload,\n          headers: headers,\n        });\n        break;\n      default:\n        axiosResponse = await httpClient.get(requestUrl, { headers });\n        break;\n    }\n\n    const { data } = axiosResponse;\n\n    return Promise.resolve({ data });\n  },\n});\n", "import type { CrudOperators } from \"@refinedev/core\";\n\nexport const mapOperator = (operator: CrudOperators) => {\n  switch (operator) {\n    case \"startswith\":\n      return \"startsWith\";\n    case \"endswith\":\n      return \"endsWith\";\n    case \"nin\":\n      return \"notIn\";\n    case \"ncontains\":\n      return \"notContainsi\";\n    case \"ncontainss\":\n      return \"notContains\";\n    case \"containss\":\n      return \"contains\";\n    case \"contains\":\n      return \"containsi\";\n    case \"nnull\":\n      return \"notNull\";\n  }\n\n  return operator;\n};\n", "import type {\n  CrudFilters,\n  LogicalFilter,\n  ConditionalFilter,\n} from \"@refinedev/core\";\nimport { mapOperator } from \"./mapOperator\";\nimport qs from \"qs\";\n\nexport const generateNestedFilterField = (field: string) => {\n  const fields = field.split(\".\");\n\n  if (fields.length > 1) {\n    let fieldQuery = \"\";\n\n    fields.forEach((v) => {\n      fieldQuery += `[${v}]`;\n    });\n\n    return fieldQuery;\n  }\n  return `[${fields[0]}]`;\n};\n\nconst generateLogicalFilter = (filter: LogicalFilter, parent = \"\"): string => {\n  const { field, operator, value } = filter;\n\n  let rawQuery = \"\";\n\n  const mappedOperator = mapOperator(operator);\n\n  if (Array.isArray(value)) {\n    value.map((val, index) => {\n      rawQuery += `&filters${parent}${generateNestedFilterField(\n        field,\n      )}[$${mappedOperator}][${index}]=${val}`;\n    });\n  } else {\n    rawQuery += `&filters${parent}${generateNestedFilterField(\n      field,\n    )}[$${mappedOperator}]=${value}`;\n  }\n  return rawQuery;\n};\n\nconst generateConditionalFilter = (\n  filter: ConditionalFilter,\n  parent = \"\",\n): string => {\n  let rawQuery = \"\";\n\n  filter.value.map((item, index) => {\n    if (item.operator !== \"or\" && item.operator !== \"and\" && \"field\" in item) {\n      rawQuery += generateLogicalFilter(\n        item,\n        `${parent}[$${filter.operator}][${index}]`,\n      );\n    } else {\n      rawQuery += generateConditionalFilter(\n        item,\n        `${parent}[$${filter.operator}][${index}]`,\n      );\n    }\n  });\n  return rawQuery;\n};\n\nexport const generateFilter = (filters?: CrudFilters) => {\n  let rawQuery = \"\";\n\n  if (filters) {\n    filters.map((filter) => {\n      if (\n        filter.operator !== \"or\" &&\n        filter.operator !== \"and\" &&\n        \"field\" in filter\n      ) {\n        rawQuery += generateLogicalFilter(filter);\n      } else {\n        rawQuery += generateConditionalFilter(filter);\n      }\n    });\n  }\n\n  const parsedQuery = qs.parse(rawQuery, { depth: 15 });\n\n  const queryFilters = qs.stringify(parsedQuery, { encodeValuesOnly: true });\n\n  return queryFilters;\n};\n", "import type { CrudSorting } from \"@refinedev/core\";\n\nexport const generateSort = (sorters?: CrudSorting) => {\n  const _sort: string[] = [];\n\n  if (sorters) {\n    sorters.map((item) => {\n      if (item.order) {\n        _sort.push(`${item.field}:${item.order}`);\n      }\n    });\n  }\n\n  return _sort;\n};\n", "import axios from \"axios\";\nimport type { HttpError } from \"@refinedev/core\";\n\nexport const axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    const customError: HttpError = {\n      ...error,\n      message: error.response?.data?.message,\n      statusCode: error.response?.status,\n    };\n\n    return Promise.reject(customError);\n  },\n);\n", "const flatten = (data: any) => {\n  if (!data.attributes) return data;\n\n  return {\n    id: data.id,\n    ...data.attributes,\n  };\n};\n\nconst isObject = (data: any) =>\n  Object.prototype.toString.call(data) === \"[object Object]\";\n\nexport const normalizeData = (data: any): any => {\n  if (Array.isArray(data)) {\n    return data.map((item) => normalizeData(item));\n  }\n\n  if (isObject(data)) {\n    if (Array.isArray(data.data)) {\n      data = [...data.data];\n    } else if (isObject(data.data)) {\n      data = flatten({ ...data.data });\n    } else if (data.data === null) {\n      data = null;\n    } else {\n      data = flatten(data);\n    }\n\n    for (const key in data) {\n      data[key] = normalizeData(data[key]);\n    }\n\n    return data;\n  }\n\n  return data;\n};\n", "type ErrorMessage = {\n  path: string[];\n  message: string;\n  name: string;\n};\n\ntype TransformedErrors = {\n  [key: string]: string[];\n};\n\nexport const transformErrorMessages = (\n  errorMessages: ErrorMessage[],\n): TransformedErrors => {\n  const transformedErrors: TransformedErrors = {};\n\n  for (const error of errorMessages) {\n    const key = error.path[0];\n\n    if (transformedErrors[key]) {\n      transformedErrors[key].push(error.message);\n    } else {\n      transformedErrors[key] = [error.message];\n    }\n  }\n\n  return transformedErrors;\n};\n", "import type { HttpError } from \"@refinedev/core\";\nimport { transformErrorMessages } from \"./transformErrorMessages\";\n\nexport const transformHttpError = (err: any): HttpError => {\n  const error = err?.response?.data?.error || {};\n\n  const message = error?.message;\n  const statusCode = error?.status;\n  const errorMessages = error?.details?.errors || [];\n\n  const httpError: HttpError = {\n    statusCode,\n    message,\n    errors: transformErrorMessages(errorMessages),\n  };\n\n  return httpError;\n};\n", "import { type MetaQuery, pickNotDeprecated } from \"@refinedev/core\";\nimport axios from \"axios\";\nimport qs from \"qs\";\n\ninterface ILoginResponse {\n  jwt: string;\n  user: IUser;\n}\n\ninterface IRole {\n  id: number | string;\n  name: string;\n  description: string;\n  type: string;\n}\n\ninterface IUser {\n  id: number | string;\n  username: string;\n  email: string;\n  provider: string;\n  confirmed: boolean;\n  blocked: boolean;\n  role: IRole;\n  created_at: string;\n  updated_at: string;\n}\n\nexport type MeOptions = {\n  meta?: MetaQuery;\n  /**\n   * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.\n   */\n  metaData?: MetaQuery;\n};\n\nexport const AuthHelper = (apiUrl: string) => ({\n  login: async (identifier: string, password: string) => {\n    const url = `${apiUrl}/auth/local`;\n\n    return await axios.post<ILoginResponse>(url, {\n      identifier,\n      password,\n    });\n  },\n  me: async (token: string, options?: MeOptions) => {\n    const { metaData, meta: _meta } = options ?? {};\n    const meta = pickNotDeprecated(_meta, metaData);\n    const locale = meta?.locale;\n    const fields = meta?.fields;\n    const populate = meta?.populate;\n\n    const query = {\n      locale,\n      fields,\n      populate,\n    };\n\n    return await axios.get<IUser>(\n      `${apiUrl}/users/me?${qs.stringify(query, {\n        encodeValuesOnly: true,\n      })}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      },\n    );\n  },\n});\n", "export const getValueProps = (data: any, imageUrl: string) => {\n  if (!data) {\n    return { fileList: [] };\n  }\n\n  return {\n    file: data.file,\n    fileList:\n      data.fileList ??\n      (Array.isArray(data) ? data : [data]).map((item: any) => {\n        const file: any = {\n          name: item.name,\n          percent: item.percent,\n          size: item.size,\n          status: item.status,\n          type: item.mime || item.type,\n          uid: item.id,\n        };\n\n        if (item.url) {\n          file.url = `${imageUrl}${item.url}`;\n        }\n\n        return file;\n      }),\n  };\n};\n\nexport const mediaUploadMapper = (params: any) => {\n  Object.keys(params).map((item) => {\n    if (params[item]) {\n      const param = params[item].fileList;\n      const isMediaField = Array.isArray(param);\n      if (isMediaField) {\n        const ids = [];\n        for (const item of param) {\n          if (item.response) {\n            for (const response of item.response) {\n              ids.push(response.id);\n            }\n          } else {\n            ids.push(item.uid);\n          }\n        }\n        params[item] = ids;\n      }\n    }\n  });\n  return params;\n};\n"],
  "mappings": "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",
  "names": ["import_qs", "import_qs", "mapOperator", "operator", "generateNestedFilterField", "field", "fields", "fieldQuery", "v", "generateLogicalFilter", "filter", "parent", "value", "rawQuery", "mappedOperator", "val", "index", "generateConditionalFilter", "item", "generateFilter", "filters", "parsedQuery", "qs", "generateSort", "sorters", "_sort", "axiosInstance", "axios", "response", "error", "_a", "_b", "_c", "customError", "flatten", "data", "isObject", "normalizeData", "key", "transformErrorMessages", "errorMessages", "transformedErrors", "transformHttpError", "err", "message", "statusCode", "DataProvider", "apiUrl", "httpClient", "resource", "pagination", "meta", "url", "current", "pageSize", "mode", "locale", "populate", "publicationState", "querySorters", "queryFilters", "query", "ids", "variables", "dataVariables", "id", "errors", "httpError", "param", "method", "payload", "headers", "requestUrl", "sortQuery", "filterQuery", "axiosResponse", "AuthHelper", "identifier", "password", "token", "options", "metaData", "_meta", "pickNotDeprecated", "getValueProps", "imageUrl", "file", "mediaUploadMapper", "params"]
}
